{"version":3,"file":"music-player.component.js","sourceRoot":"","sources":["music-player.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAyD,eAAe,CAAC,CAAA;AACzE,8BAA6B,8BAA8B,CAAC,CAAA;AAE5D,qCAA0B,kDAAkD,CAAC,CAAA;AAC7E,uCAA4B,sDAAsD,CAAC,CAAA;AA8BnF;IAOE,qBAAmB,YAA0B;QAP/C,iBA0DC;QAnDoB,iBAAY,GAAZ,YAAY,CAAc;QAE3C,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;QAClB,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QAEvB,IAAI,CAAC,UAAU,GAAG,IAAI,mBAAY,EAAE,CAAC;QAErC,YAAY,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,UAAA,GAAG;YAC9B,KAAI,CAAC,MAAM,GAAG,GAAG,CAAC;YAClB,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,MAAM,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IAEL,CAAC;IACD,8BAAQ,GAAR;IAEA,CAAC;IACD,qCAAe,GAAf,UAAgB,KAAY;QAE1B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC3C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE/C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YACnB,MAAM,EAAE,MAAM;YACd,KAAK,EAAE,IAAI,CAAC,YAAY;SACzB,CAAC,CAAC;IAEL,CAAC;IACD,+BAAS,GAAT;QAEE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACvD,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE/C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YACnB,MAAM,EAAE,MAAM;YACd,KAAK,EAAE,IAAI,CAAC,YAAY;SACzB,CAAC,CAAC;IAEL,CAAC;IACD,+BAAS,GAAT;QAEE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACvD,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE/C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YACnB,MAAM,EAAE,MAAM;YACd,KAAK,EAAE,IAAI,CAAC,YAAY;SACzB,CAAC,CAAC;IAEL,CAAC;IAlFH;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,MAAM;YAChB,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,wVAgBX;YACA,SAAS,EAAE,CAAC,4BAA4B,CAAC;YACzC,UAAU,EAAE,CAAC,gCAAS,EAAE,oCAAW,CAAC;YACpC,SAAS,EAAE,CAAC,4BAAY,EAAE,cAAO,CAAC,cAAc,EAAE,EAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,MAAM,CAAC,oBAAoB,CAAC,CAAC,EAAC,CAAC,CAAC;SAC5H,CAAC;;mBAAA;IA4DF,kBAAC;AAAD,CAAC,AA1DD,IA0DC;AA1DY,mBAAW,cA0DvB,CAAA","sourcesContent":["import { Component, provide, OnInit, EventEmitter } from '@angular/core';\nimport { MediaService } from '../../services/media-service';\nimport { Media } from \"../../schema/media\";\nimport { TrackList } from \"../../components/track-list/track-list.component\";\nimport { AudioPlayer } from \"../../components/audio-player/audio-player.component\";\n\ndeclare let module: any;\n\n\n@Component({\n  selector: 'view',\n  moduleId: module.id,\n  template: `\n  <div class=\"music__player\">\n  \n    <audio-player\n      [url]=\"currentTrack.url\"\n      [control]=\"controller\"\n      (onended)=\"nextTrack()\">\n    </audio-player>\n    \n    <track-list\n      [trackList]=\"tracks\"\n      [control]=\"controller\"\n      (onselect)=\"onTrackSelected($event)\">\n    </track-list>\n\n  </div>\n`,\n styleUrls: ['music-player.component.css'],\n directives: [TrackList, AudioPlayer],\n providers: [MediaService, provide('audioContext', {useValue: new (window['AudioContext'] ||Â window['webkitAudioContext'])})]\n})\n\nexport class MusicPlayer implements OnInit {\n  message: string;\n  tracks: Media[];\n  playhead: number;\n  controller: EventEmitter<any>;\n  currentTrack: any;\n  \n  constructor(public mediaService: MediaService) {\n\n    this.playhead = 0;\n    this.currentTrack = {};\n    \n    this.controller = new EventEmitter();\n\n    mediaService.get().subscribe(res => {\n      this.tracks = res;\n      this.currentTrack = this.tracks[this.playhead];\n    });\n\n  }\n  ngOnInit() {\n    \n  }\n  onTrackSelected(track: Media): void {\n    \n    this.playhead = this.tracks.indexOf(track);\n    this.currentTrack = this.tracks[this.playhead];\n\n    this.controller.emit({\n      action: 'play',\n      track: this.currentTrack\n    });\n    \n  }\n  prevTrack() {\n    \n    this.playhead = this.tracks.indexOf(this.currentTrack);\n    this.playhead--;\n    this.currentTrack = this.tracks[this.playhead];\n    \n    this.controller.emit({\n      action: 'play',\n      track: this.currentTrack\n    });\n    \n  }\n  nextTrack() {\n    \n    this.playhead = this.tracks.indexOf(this.currentTrack);\n    this.playhead++;\n    this.currentTrack = this.tracks[this.playhead];\n    \n    this.controller.emit({\n      action: 'play',\n      track: this.currentTrack\n    });\n    \n  }\n}\n"]}