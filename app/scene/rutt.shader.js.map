{"version":3,"file":"rutt.shader.js","sourceRoot":"","sources":["rutt.shader.ts"],"names":[],"mappings":";AAAC,IAAI,cAAc,GAAG;IAEjB,QAAQ,EAAE;QAET,UAAU,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE;QACtC,YAAY,EAAG,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE;QACzC,UAAU,EAAG,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE;QACtC,SAAS,EAAG,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE;QACxC,SAAS,EAAG,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE;QACrC,SAAS,EAAG,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE;QACrC,SAAS,EAAG,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE;KAElC;IACD,YAAY,EAAE;QACjB,sBAAsB;QACtB,wBAAwB;QACrB,6BAA6B;QAC1B,sBAAsB;QACtB,mBAAmB;QACnB,yBAAyB;QAC/B,2BAA2B;QAC3B,wBAAwB;QACxB,wBAAwB;QACxB,wBAAwB;QAElB,eAAe;QACX,oBAAoB;QACpB,UAAU;QACV,WAAW;QACjB,WAAW;QACX,+CAA+C;QACzC,qCAAqC;QACrC,2DAA2D;QAC3D,oHAAoH;QACpH,oCAAoC;QAEpC,kEAAkE;QACtE,GAAG;KAEL,CAAC,IAAI,CAAC,IAAI,CAAC;IAEZ,cAAc,EAAE;QAEnB,sBAAsB;QACtB,wBAAwB;QAEtB,eAAe;QAEX,6CAA6C;QACjD,GAAG;KAED,CAAC,IAAI,CAAC,IAAI,CAAC;CAEhB;AAGQ,sBAAc,kBAHrB;AAGwB","sourcesContent":[" let RuttEtraShader = {\n\n    \tuniforms: {\n\n    \t\t\"tDiffuse\": { type: \"t\", value: null },\n    \t\t\"multiplier\":  { type: \"f\", value: 13.3 },\n    \t\t\"displace\":  { type: \"f\", value: 7.3 },\n    \t\t\"opacity\":  { type: \"f\", value: 1.0 },\n\t\t\t\"originX\":  { type: \"f\", value: 0.0 },\n\t\t\t\"originY\":  { type: \"f\", value: 0.0 },\n\t\t\t\"originZ\":  { type: \"f\", value: 0.0 }\n\n    \t},\n    \tvertexShader: [\n\t\t'precision highp int;',\n\t\t'precision highp float;',\n    \t'uniform sampler2D tDiffuse;',\n        'varying vec3 vColor;',\n        'varying vec2 vUv;',\n        'uniform float displace;',\n\t\t'uniform float multiplier;',\n\t\t'uniform float originX;',\n\t\t'uniform float originY;',\n\t\t'uniform float originZ;',\n\n        'void main() {',\n            'vec4 newVertexPos;',\n            'vec4 dv;',\n            'float df;',\n    \t\t'vUv = uv;',\n    \t\t'vec3 origin = vec3 (originX,originY,originZ);',\n            'dv = texture2D( tDiffuse, vUv.xy );',\n            'df = multiplier*dv.x + multiplier*dv.y + multiplier*dv.z;',\n            'newVertexPos = vec4( normalize(position - origin) * df * vec3 (1.0, 1.0, displace), 0.0 ) + vec4( position, 1.0 );',\n            'vColor = vec3( dv.x, dv.y, dv.z );',\n\n            'gl_Position = projectionMatrix * modelViewMatrix * newVertexPos;',\n        '}'\n\n    \t].join(\"\\n\"),\n\n    \tfragmentShader: [\n\n\t\t'varying vec3 vColor;',\n\t\t'uniform float opacity;',\n\n\t\t  'void main() {',\n\n\t\t      'gl_FragColor = vec4( vColor.rgb, opacity );',\n\t\t  '}'\n\n    \t].join(\"\\n\")\n\n};\n\n\nexport { RuttEtraShader };"]}