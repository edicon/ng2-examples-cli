{"version":3,"file":"audio-player.component.js","sourceRoot":"","sources":["audio-player.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, ElementRef, Inject, Input, Output, OnInit, OnDestroy, EventEmitter } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { MediaService } from '../../services/media-service';\nimport { WaveformComponent } from '../waveform/waveform.component';\n\ndeclare let module: any;\n\n@Component({\nselector: 'audio-player',\ntemplate: `\n  <audio controls src=\"{{url}}\" type=\"audio/mpeg\"\n  (play)=\"onPlay($event)\"\n  (ended)=\"onTrackEnded($event)\">\n  </audio>\n  <waveform-monitor></waveform-monitor>\n`,\ndirectives: [WaveformComponent],\nproviders: [MediaService],\nmoduleId: module.id,\nstyleUrls: ['audio-player.component.css']\n\n})\n\nexport class AudioPlayer implements OnInit, OnDestroy {\n\n\n  audioStream: any;\n  elem: HTMLElement;\n  audioElem: any;\n  ctx: AudioContext;\n  analyzer: AnalyserNode;\n  processor: ScriptProcessorNode;\n  sourceNode: MediaElementAudioSourceNode;\n  freqData: Uint8Array;\n  mediaService: MediaService;\n\n  @Input() url: string;\n  @Input() control: any;\n  @Output() onended: any;\n  @Output() controls: any;\n\n  constructor(elem: ElementRef, mediaService: MediaService, @Inject('audioContext') private context) {\n     this.elem = elem.nativeElement;\n     this.mediaService = mediaService;\n     this.ctx = context;\n     this.analyzer = this.ctx.createAnalyser();\n     this.processor = this.ctx.createScriptProcessor(1024);\n     this.processor.connect(this.ctx.destination);\n     this.analyzer.connect(this.processor);\n     this.freqData = new Uint8Array(this.analyzer.frequencyBinCount);\n     this.onended = new EventEmitter();\n  }\n\n  ngOnInit() {\n\n    this.audioElem = this.elem.querySelector('audio');\n    this.sourceNode = this.ctx.createMediaElementSource(this.audioElem);\n    this.sourceNode.connect(this.analyzer);\n    this.sourceNode.connect(this.ctx.destination);\n\n    this.control.subscribe((control)=>{\n      if(control.action === 'play') {\n        this.audioElem.play();\n      }\n      if(control.action === 'pause') {\n        this.audioElem.pause();\n      }\n    });\n\n  }\n\n  ngOnDestroy() {\n\n    this.processor.onaudioprocess = function() {};\n    this.sourceNode.disconnect();\n    this.sourceNode = null;\n\n  }\n\n  onPlay(ev) {\n\n    let uint8ArrayToArray = function(uint8Array) {\n        let array = [];\n\n        for (let i = 0; i < uint8Array.byteLength; i++) {\n            array[i] = uint8Array[i];\n        }\n\n        return array;\n    };\n\n    this.processor.onaudioprocess = (e) => {\n\n        this.analyzer.getByteFrequencyData(this.freqData);\n        this.mediaService.setFrequencyData(uint8ArrayToArray(this.freqData));\n\n    };\n\n  }\n\n  onTrackEnded(ev) {\n\n    this.processor.onaudioprocess = function() {};\n    this.onended.emit();\n\n  }\n\n}\n"]}