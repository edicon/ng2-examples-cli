{"version":3,"file":"slider.component.js","sourceRoot":"","sources":["slider.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAoF,eAAe,CAAC,CAAA;AACpG,oCAAiC,sCAAsC,CAAC,CAAA;AAWxE;IAWE,yBAAY,GAAsB,EAAE,GAAe;QAGjD,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,aAAa,CAAC;QAC9B,IAAI,CAAC,SAAS,GAAG,4BAA4B,CAAC;IAEhD,CAAC;IAED,kCAAQ,GAAR;QAAA,iBA4BC;QA1BC,IAAI,CAAC,QAAQ,GAAG;YACd,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;YAC/B,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YACjB,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SAClB,CAAC;QAEF,mEAAmE;QAEnE,EAAE,CAAA,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;QACpD,CAAC;QAED,EAAE,CAAA,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QACzC,CAAC;QAED,EAAE,CAAA,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QACxC,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,IAAI,mBAAY,EAAE,CAAC;QAEtC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,UAAC,GAAG;YAC7B,KAAI,CAAC,SAAS,GAAG,cAAc,GAAC,GAAG,CAAC,CAAC,CAAC,GAAC,GAAG,GAAC,GAAG,CAAC,CAAC,CAAC,GAAC,GAAG,GAAC,GAAG,CAAC,CAAC,CAAC,GAAC,GAAG,CAAC;YACjE,KAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC;IAvCF;QAAC,YAAK,CAAC,SAAS,CAAC;;oDAAA;IAhBlB;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,QAAQ;YAClB,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,WAAW,EAAE,uBAAuB;YACpC,SAAS,EAAE,CAAC,sBAAsB,CAAC;YACnC,UAAU,EAAE,CAAC,wCAAkB,CAAC;SACjC,CAAC;;uBAAA;IAmDF,sBAAC;AAAD,CAAC,AAlDD,IAkDC;AAlDY,uBAAe,kBAkD3B,CAAA","sourcesContent":["import {Component, EventEmitter, ElementRef, ChangeDetectorRef, Input, OnInit} from '@angular/core';\nimport {DraggableDirective} from '../../directives/draggable.directive';\n\ndeclare let module: any;\n\n@Component({\n  selector: 'slider',\n  moduleId: module.id,\n  templateUrl: 'slider.component.html',\n  styleUrls: ['slider.component.css'],\n  directives: [DraggableDirective]\n})\nexport class SliderComponent implements OnInit{\n  \n\n  pos: EventEmitter<any>;\n  transform: string;\n  ref: ChangeDetectorRef;\n  elem: any;\n  _options: any;\n  \n @Input('options') options: any; \n  \n  constructor(ref: ChangeDetectorRef, _el: ElementRef) {\n    \n\n    this.ref = ref;\n    this.elem = _el.nativeElement;\n    this.transform = 'translate3d(0px, 0px, 1px)';\n    \n  }\n  \n  ngOnInit() {\n    \n    this._options = {\n      position: this.options.position,\n      x: this.options.x,\n      y: this.options.y\n    };\n    \n    //TODO: Position with matrix3D transform or use web animations api?\n    \n    if(this._options.position) {\n      this.elem.style.position = this._options.position;\n    }\n    \n    if(this._options.x) {\n      this.elem.style.left = this._options.x;\n    }\n    \n    if(this._options.y) {\n      this.elem.style.top = this._options.y;\n    }\n    \n    this.options.pos = new EventEmitter();\n    \n    this.options.pos.subscribe((pos)=>{\n      this.transform = 'translate3d('+pos[0]+','+pos[1]+','+pos[2]+')';\n      this.ref.detectChanges();\n    });\n  }\n\n}"]}